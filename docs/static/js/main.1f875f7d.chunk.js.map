{"version":3,"sources":["Counter.js","Door.js","App.js","serviceWorker.js","index.js"],"names":["Counter","react_default","a","createElement","this","props","num","React","Component","Door","_this$props","text","total","isOpen","onClick","today","Date","getDate","undefined","className","concat","App","state","doors","_this","getRandomDoors","openDoor","index","findIndex","d","newDoors","Object","toConsumableArray","slice","objectSpread","setState","map","item","arr","length","rand","Math","random","sort","b","_this2","door","Door_Door","assign","key","openDoorsNum","filter","Fragment","Counter_Counter","renderDoors","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1f875f7d.chunk.js","sourcesContent":["import React from 'react'\n\nexport default class Counter extends React.Component {\n  render() {\n    return <h1>Doors open: {this.props.num}</h1>\n  }\n}\n","import React from 'react'\nimport './Door.css'\n\nexport default class Door extends React.Component {\n  render() {\n    const { text, num, total, isOpen, onClick } = this.props\n    const today = new Date().getDate()\n    return (\n      <section\n        onClick={num <= today ? onClick : undefined}\n        className={isOpen ? 'Door open' : 'Door'}\n      >\n        {isOpen ? text : `${num}/${total}`}\n      </section>\n    )\n  }\n}\n","import React from 'react'\nimport './App.css'\nimport Counter from './Counter'\nimport Door from './Door'\n\nclass App extends React.Component {\n  state = {\n    doors: this.getRandomDoors()\n  }\n\n  getRandomDoors() {\n    return [\n      { text: 'Foo' },\n      { text: 'Bar' },\n      { text: 'Baz' },\n      { text: 'Foobar' },\n      { text: 'Lorem' },\n      { text: 'ipsum' },\n      { text: 'dolor' },\n      { text: 'sit' },\n      { text: 'hello' },\n      { text: 'world' },\n      { text: 'Foo' },\n      { text: 'Bar' },\n      { text: 'Baz' },\n      { text: 'Foo' },\n      { text: 'Foo' },\n      { text: 'Foo' },\n      { text: 'Foo' },\n      { text: 'Foo' },\n      { text: 'Foo' },\n      { text: 'Foo' },\n      { text: 'Foo' },\n      { text: 'Foo' },\n      { text: 'Foo' },\n      { text: 'Foo' }\n    ]\n      .map((item, index, arr) => ({\n        ...item,\n        num: index + 1,\n        isOpen: false,\n        total: arr.length,\n        rand: Math.random()\n      }))\n      .sort((a, b) => a.rand - b.rand)\n      .map(item => {\n        delete item.rand\n        return item\n      })\n  }\n\n  renderDoors() {\n    return this.state.doors.map(door => (\n      <Door key={door.num} {...door} onClick={() => this.openDoor(door.num)} />\n    ))\n  }\n\n  openDoor = num => {\n    const { doors } = this.state\n    const index = doors.findIndex(d => d.num === num)\n    const newDoors = [\n      ...doors.slice(0, index),\n      { ...doors[index], isOpen: true },\n      ...doors.slice(index + 1)\n    ]\n\n    this.setState({\n      doors: newDoors\n    })\n  }\n\n  render() {\n    const openDoorsNum = this.state.doors.filter(door => door.isOpen).length\n    return (\n      <React.Fragment>\n        <Counter num={openDoorsNum} />\n        {this.renderDoors()}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}